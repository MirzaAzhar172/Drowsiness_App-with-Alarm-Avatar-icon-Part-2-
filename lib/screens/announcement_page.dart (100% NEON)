import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:intl/intl.dart';
import 'package:google_fonts/google_fonts.dart'; // Import google_fonts package

class AnnouncementPage extends StatefulWidget {
  final List<String> notifications;

  AnnouncementPage({Key? key, required this.notifications}) : super(key: key);

  @override
  _AnnouncementPageState createState() => _AnnouncementPageState();
}

class NotificationItem {
  final String message;
  final DateTime time;

  NotificationItem({required this.message, required this.time});
}

class _AnnouncementPageState extends State<AnnouncementPage> {
  String _location = 'Mencari Lokasi...';
  String _weather = 'Mencari Cuaca...';
  List<NotificationItem> _notifications = [];
  List<String> _news = [
    'Berita 1: Kes COVID meningkat di Selangor',
    'Berita 2: Harga minyak naik lagi',
    'Berita 3: Banjir kilat di Kuala Lumpur'
  ];

  @override
  void initState() {
    super.initState();
    _getLocationFromIP();
    _notifications = widget.notifications.map((message) => NotificationItem(message: message, time: DateTime.now())).toList();
  }

  Future<void> _getLocationFromIP() async {
    final url = Uri.parse('http://ip-api.com/json');

    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        setState(() {
          _location = '${data['city']}, ${data['region']}, ${data['country']}';
        });
        double latitude = data['lat'];
        double longitude = data['lon'];
        print('Latitude: $latitude, Longitude: $longitude');
        await _getWeather(latitude, longitude);
      } else {
        setState(() {
          _location = 'Gagal mendapatkan lokasi.';
        });
      }
    } catch (e) {
      setState(() {
        _location = 'Ralat mendapatkan lokasi: $e';
      });
    }
  }

  Future<void> _getWeather(double latitude, double longitude) async {
    final apiKey = 'eb3a516fb18b82d0f8e963945e69d17b';
    final url = Uri.parse(
        'https://api.openweathermap.org/data/2.5/weather?lat=$latitude&lon=$longitude&appid=$apiKey&units=metric');

    try {
      print('Membuat permintaan cuaca ke: $url');
      final response = await http.get(url);
      print('Respons cuaca: ${response.statusCode}');
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('Data cuaca: $data');
        setState(() {
          _weather =
          'Cuaca: ${data['weather'][0]['description']}, Suhu: ${data['main']['temp']}°C';
        });
      } else {
        setState(() {
          _weather = 'Gagal mendapatkan cuaca: ${response.statusCode}';
        });
      }
    } catch (e) {
      print('Ralat mendapatkan cuaca: $e');
      setState(() {
        _weather = 'Ralat mendapatkan cuaca: $e';
      });
    }
  }

  void _clearNotifications() async {
    final confirm = await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Clear Notifications'),
        content: Text('Are you sure you want to delete all notifications?'),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context, false);
            },
            child: Text('No'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context, true);
            },
            child: Text('Yes'),
          ),
        ],
      ),
    );

    if (confirm ?? false) {
      setState(() {
        _notifications.clear();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Announcement', style: TextStyle(color: Colors.white, fontFamily: GoogleFonts.electrolize().fontFamily)),
        backgroundColor: Color(0xFF1E293B), // Dark app bar color
      ),
      backgroundColor: Color(0xFF0F172A), // Dark background color
      body: ListView(
        padding: EdgeInsets.all(16.0),
        children: [
          // Weather & Location Container
          Container(
            decoration: BoxDecoration(
              color: Color(0xFF1E293B), // Dark container color
              borderRadius: BorderRadius.circular(10.0),
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Color(0xFF64FFDA).withOpacity(0.3),
                  Color(0xFF1E293B),
                ],
              ),
              border: Border.all(
                color: Color(0xFF64FFDA), // Neon accent color
                width: 1.0,
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.grey.shade900.withOpacity(0.3),
                  blurRadius: 4,
                  spreadRadius: 1,
                ),
              ],
            ),
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                Row(
                  children: [
                    Icon(Icons.location_on, color: Color(0xFF64FFDA)), // Neon accent color
                    SizedBox(width: 8),
                    Text(
                      'Cuaca & Lokasi:',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                        fontFamily: GoogleFonts.electrolize().fontFamily,
                      ), // White text color
                    ),
                  ],
                ),
                SizedBox(height: 8),
                _location != 'Mencari Lokasi...' ?
                Text(
                  '${_location.split(',').first} / ${_weather.split('Suhu: ').last}',
                  style: TextStyle(fontSize: 16, color: Colors.grey[400], fontFamily: GoogleFonts.electrolize().fontFamily), // Light grey text color
                ) :
                Text(
                  'Shah Alam / 32.86°C',
                  style: TextStyle(fontSize: 16, color: Colors.grey[400], fontFamily: GoogleFonts.electrolize().fontFamily), // Light grey text color
                ),
              ],
            ),
          ),
          SizedBox(height: 16),

          // Notifications Container
          Container(
            decoration: BoxDecoration(
              color: Color(0xFF1E293B), // Dark container color
              borderRadius: BorderRadius.circular(10.0),
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Color(0xFF64FFDA).withOpacity(0.3),
                  Color(0xFF1E293B),
                ],
              ),
              border: Border.all(
                color: Color(0xFF64FFDA), // Neon accent color
                width: 1.0,
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.grey.shade900.withOpacity(0.3),
                  blurRadius: 4,
                  spreadRadius: 1,
                ),
              ],
            ),
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.notifications, color: Color(0xFF64FFDA)), // Neon accent color
                        SizedBox(width: 8),
                        Text(
                          'Notifikasi',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                            fontFamily: GoogleFonts.electrolize().fontFamily,
                          ), // White text color
                        ),
                      ],
                    ),
                    TextButton(
                      onPressed: _clearNotifications,
                      style: TextButton.styleFrom(
                        padding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                        minimumSize: Size.zero,
                        tapTargetSize: MaterialTapTargetSize.shrinkWrap,
                        backgroundColor: Colors.red,
                        textStyle: TextStyle(fontSize: 12),
                        foregroundColor: Colors.white,
                      ),
                      child: Text(
                        'Clear',
                        style: TextStyle(fontSize: 12, color: Colors.white, fontFamily: GoogleFonts.electrolize().fontFamily),
                      ),
                    ),
                  ],
                ),
                _notifications.isEmpty ?
                Padding(
                  padding: const EdgeInsets.only(top: 8.0),
                  child: Text("Tiada notifikasi buat masa ini.", style: TextStyle(color: Colors.grey[400], fontFamily: GoogleFonts.electrolize().fontFamily)), // Light grey text color
                )
                    : ListView.builder(
                  shrinkWrap: true,
                  physics: NeverScrollableScrollPhysics(),
                  itemCount: _notifications.length,
                  itemBuilder: (context, index) {
                    final notification = _notifications[index];
                    return Container(
                      padding: const EdgeInsets.all(8.0),
                      margin: const EdgeInsets.symmetric(vertical: 4.0, horizontal: 8.0),
                      decoration: BoxDecoration(
                        color: Color(0xFF2D3748), // Dark notification color
                        borderRadius: BorderRadius.circular(8.0),
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Expanded(child: Text(notification.message, style: TextStyle(color: Colors.white, fontFamily: GoogleFonts.electrolize().fontFamily))), // White text color
                          Text(
                            DateFormat('hh:mm a').format(notification.time),
                            style: TextStyle(fontSize: 12, color: Colors.grey[400], fontFamily: GoogleFonts.electrolize().fontFamily), // Light grey text color
                          ),
                        ],
                      ),
                    );
                  },
                ),
              ],
            ),
          ),
          SizedBox(height: 16),

          // News & Media Container
          Container(
            decoration: BoxDecoration(
              color: Color(0xFF1E293B), // Dark container color
              borderRadius: BorderRadius.circular(10.0),
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Color(0xFF64FFDA).withOpacity(0.3),
                  Color(0xFF1E293B),
                ],
              ),
              border: Border.all(
                color: Color(0xFF64FFDA), // Neon accent color
                width: 1.0,
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.grey.shade900.withOpacity(0.3),
                  blurRadius: 4,
                  spreadRadius: 1,
                ),
              ],
            ),
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(Icons.library_books, color: Color(0xFF64FFDA)), // Neon accent color
                    SizedBox(width: 8),
                    Text(
                      'News & Media:',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                        fontFamily: GoogleFonts.electrolize().fontFamily,
                      ), // White text color
                    ),
                  ],
                ),
                SizedBox(height: 8),
                ListView.builder(
                  shrinkWrap: true,
                  physics: NeverScrollableScrollPhysics(),
                  itemCount: _news.length,
                  itemBuilder: (context, index) {
                    final newsItem = _news[index];
                    return Padding(
                      padding: const EdgeInsets.symmetric(vertical: 4.0),
                      child: Text(newsItem, style: TextStyle(fontSize: 16, color: Colors.grey[400], fontFamily: GoogleFonts.electrolize().fontFamily)), // Light grey text color
                    );
                  },
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
